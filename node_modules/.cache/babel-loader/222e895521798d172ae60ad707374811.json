{"ast":null,"code":"var _s = $RefreshSig$();\n\nconst useHttp = (requestConfig, applyData) => {\n  _s();\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const sendRequest = async taskText => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch(requestConfig.url, {\n        method: requestConfig.method ? requestConfig.method : \"GET\",\n        headers: requestConfig.headers ? requestConfig.headers : {},\n        body: requestConfig.body ? JSON.stringify(requestConfig.body) : null\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Request failed!\");\n      }\n\n      const data = await response.json();\n      applyData(data);\n    } catch (err) {\n      setError(err.message || \"Something went wrong!\");\n    }\n\n    return {\n      isLoading,\n      error,\n      sendRequest\n    };\n  };\n};\n\n_s(useHttp, \"vj++RuHna9NxFPGCY0p/mi1GZNM=\");\n\nexport default useHttp;","map":{"version":3,"sources":["/home/matheus/Dev/Projects/react-complete-guide-custom-hooks/src/hooks/use-http.js"],"names":["useHttp","requestConfig","applyData","isLoading","setIsLoading","useState","error","setError","sendRequest","taskText","response","fetch","url","method","headers","body","JSON","stringify","ok","Error","data","json","err","message"],"mappings":";;AAAA,MAAMA,OAAO,GAAG,CAACC,aAAD,EAAgBC,SAAhB,KAA8B;AAAA;;AAC5C,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BC,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBF,QAAQ,CAAC,IAAD,CAAlC;;AAEA,QAAMG,WAAW,GAAG,MAAOC,QAAP,IAAoB;AACtCL,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAG,IAAAA,QAAQ,CAAC,IAAD,CAAR;;AACA,QAAI;AACF,YAAMG,QAAQ,GAAG,MAAMC,KAAK,CAACV,aAAa,CAACW,GAAf,EAAoB;AAC9CC,QAAAA,MAAM,EAAEZ,aAAa,CAACY,MAAd,GAAuBZ,aAAa,CAACY,MAArC,GAA8C,KADR;AAE9CC,QAAAA,OAAO,EAAEb,aAAa,CAACa,OAAd,GAAwBb,aAAa,CAACa,OAAtC,GAAgD,EAFX;AAG9CC,QAAAA,IAAI,EAAEd,aAAa,CAACc,IAAd,GAAqBC,IAAI,CAACC,SAAL,CAAehB,aAAa,CAACc,IAA7B,CAArB,GAA0D;AAHlB,OAApB,CAA5B;;AAMA,UAAI,CAACL,QAAQ,CAACQ,EAAd,EAAkB;AAChB,cAAM,IAAIC,KAAJ,CAAU,iBAAV,CAAN;AACD;;AAED,YAAMC,IAAI,GAAG,MAAMV,QAAQ,CAACW,IAAT,EAAnB;AAEAnB,MAAAA,SAAS,CAACkB,IAAD,CAAT;AACD,KAdD,CAcE,OAAOE,GAAP,EAAY;AACZf,MAAAA,QAAQ,CAACe,GAAG,CAACC,OAAJ,IAAe,uBAAhB,CAAR;AACD;;AACD,WAAO;AACLpB,MAAAA,SADK;AAELG,MAAAA,KAFK;AAGLE,MAAAA;AAHK,KAAP;AAKD,GAzBD;AA0BD,CA9BD;;GAAMR,O;;AAgCN,eAAeA,OAAf","sourcesContent":["const useHttp = (requestConfig, applyData) => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const sendRequest = async (taskText) => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(requestConfig.url, {\n        method: requestConfig.method ? requestConfig.method : \"GET\",\n        headers: requestConfig.headers ? requestConfig.headers : {},\n        body: requestConfig.body ? JSON.stringify(requestConfig.body) : null,\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Request failed!\");\n      }\n\n      const data = await response.json();\n\n      applyData(data);\n    } catch (err) {\n      setError(err.message || \"Something went wrong!\");\n    }\n    return {\n      isLoading,\n      error,\n      sendRequest,\n    };\n  };\n};\n\nexport default useHttp;\n"]},"metadata":{},"sourceType":"module"}